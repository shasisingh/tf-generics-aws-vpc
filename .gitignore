.terraform/
.terraform.tfstate*
terraform.tfstate
.idea/
**/.idea
**/*.iml
**/*.bak
**/*.log
**/*.orig
**/*.versionsBackup
**/target
/keystores
*.cer
*.p12
**/logs
**/test-dir
**/pid
**/.gradle
**/*.DS_Store
release.properties
node_modules/**
target
.temp
.tmp
.terraform
.vscode

**invoke_lambda_response.txt
**input_create_user_**
**/.idea
**/*.iml

**/*.bak
**/*.log
**/*.orig
**/.aws-sam
**/*.versionsBackup
target/**
/keystores
*.cer
*.p12
**/logs
**/pid
**/.gradle
**/*.DS_Store
release.properties
node_modules/**

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars.json

#On a large heterogenous group, it will fail with the following error: Error: Failed to install provider
# so .gitignore,  for lock.hcl
*.terraform.lock.hcl*

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
*tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc


# incase you are using sam for lambda debug purpose.
.aws-sam

.projectutils/load-test-json/*
